import express, { Request, Response } from "express";
import fs from "fs";
import path from "path";
import cors from "cors";

const app = express();
app.use(cors()); 
const PORT = 3001;

const TEXTS_DIR = path.join(process.cwd(), "src", "components");

// üî• –ö—ç—à —Ñ–∞–π–ª–æ–≤
const fileCache: Record<string, { content: string; pageTitle: string }> = {};

// üìå –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
const ALLOWED_DIRS = new Set([
  "Drehbuch",
  "Gedichte",
  "Gefangnis",
  "Lieder",
  "SohnLuzifers",
  "Tagebucher",
  "Woche",
]);

// üìÇ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç—å
async function loadFiles(dir: string): Promise<void> {
  const entries = await fs.promises.readdir(dir, { withFileTypes: true });

  for (const entry of entries) {
    const filePath = path.join(dir, entry.name);

    if (entry.isDirectory()) {
      if (ALLOWED_DIRS.has(entry.name)) {
        await loadFiles(filePath);
      }
    } else if (entry.name.endsWith(".tsx") && ALLOWED_DIRS.has(path.basename(dir))) {
      try {
        const content = await fs.promises.readFile(filePath, "utf8");
        const pageTitle = extractPageTitle(content);

        if (pageTitle !== null) {  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pageTitle –Ω–µ null
          fileCache[filePath] = { content, pageTitle };
        }
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${filePath}`, err);
      }
    }
  }
}

// üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadFiles(TEXTS_DIR);
console.log("üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:", Object.keys(fileCache));

interface SearchResult {
  url: string;
  pageTitle: string;
}

function searchInCache(query: string): SearchResult[] {
  if (!/^[–∞-—è—ë0-9\s!?,.\-‚Äî‚Ä¶:;()[\]*+=‚Äì]+$/i.test(query)) {
    return []; // ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
  }

  const regex = new RegExp(query.replace(/\s+/g, "\\s+"), "i"); // ‚úÖ –ü–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ–±–µ–ª–∞–º "—Å–ª–∏–≤–∞—Ç—å—Å—è"

  return Object.entries(fileCache)
    .filter(([, { content }]) => {
      // ‚úÖ –í—ã—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É </h2> –∏ <div className="cwc_bot">
      const match = content.match(/<\/h2>(.*?)<div className="cwc_bot">/s);
      if (!match) return false; // ‚ùå –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –±–ª–æ–∫–∞ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

      const cleanContent = match[1] // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏
        .replace(/<br\s*\/?>|\n|<\/?p>/g, " ") // –£–±–∏—Ä–∞–µ–º <br>, <p>, </p>, \n
        .replace(/\s+/g, " ") // –õ–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–¥–∏–Ω

      return regex.test(cleanContent);
    })
    .map(([filePath, { pageTitle }]) => {
      const relativePath = path.relative(TEXTS_DIR, filePath);
      const cleanPath = relativePath.replace(/\\/g, "/").replace(/\.tsx$/, "");
      const url = `/${cleanPath}`;

      return { url, pageTitle };
    });
}





// üîé –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π "‚Üí" –≤ <Link>)
function extractPageTitle(content: string): string | null {
  // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ " ‚Üí ", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Å—Ç–∏ –ø—É—Ç–∏
  const parts = content.split(" ‚Üí ").map(part => part.trim());

  // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (–æ–Ω –∏ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫)
  let title: string | null = parts.length ? parts[parts.length - 1] : null;

  if (!title) return null;  // ‚úÖ –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null

  // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–µ—Ä–≤–æ–º <div>
  title = title.split("<div")[0].trim();

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ </div> –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
  title = title.replace(/<\/div>\s*$/g, "").trim();
  title = title.replace(/<\/div>\s*$/g, "").trim();

  // –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å–ª–æ–≤–∞, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –∫–æ–¥, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
  const forbiddenPatterns = ["const ", "function ", "return ", "=>", "class "];
  if (forbiddenPatterns.some(pattern => title.includes(pattern))) {
    return null; // ‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Ö–æ–∂ –Ω–∞ –∫–æ–¥
  }

  return title;
}

// üñ• API-—Ä–æ—É—Ç –ø–æ–∏—Å–∫–∞
app.get("/search", async (req: Request, res: Response): Promise<void> => {
  try {
    const { q } = req.query;
    if (!q || typeof q !== "string") {
      res.status(400).json({ error: "Missing or invalid query" });
      return;
    }

    console.log(`üîé –ü–æ–∏—Å–∫: "${q}"`);
    const results = searchInCache(q);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${results.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);

    res.json(results);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(3001, '0.0.0.0', () => console.log(`üöÄ Server running on http://localhost:${PORT}`));
